        -:    0:Source:hw.c
        -:    0:Graph:hwX-hw.gcno
        -:    0:Data:hwX-hw.gcda
        -:    0:Runs:2
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <string.h>
        -:    4:#include <stdbool.h>
        -:    5:
        -:    6:#define INP_SIZE 100
        -:    7:
        -:    8:struct Page{
        -:    9:    bool valid;     //if valid, in main memory(pp), else in dp
        -:   10:    bool dirty;     //written to
        -:   11:    int pp;         //physical page address
        -:   12:    // int dp;         //disk page address
        -:   13:};
        -:   14:
        -:   15:struct Page virt_mem[16];
        -:   16:int main_mem[4][8];
        -:   17:int disk_mem[16][8];
        -:   18:
        -:   19:int fifo_list[4][2];
        -:   20:int lru_list[4][2];
        -:   21:int lru_counter = 0;
        -:   22:int open_spot = 0;
        -:   23:
        -:   24:bool algo_fifo;
        -:   25:
        4:   26:void showmain(int page_num) {
        4:   27:    printf("SHOWMAIN");
       36:   28:    for (int i = 0; i < 8; i++){
       32:   29:        printf("%d: %d\n", i, main_mem[page_num][i]);
        -:   30:    }
        4:   31:}
        -:   32:
        4:   33:void showptable() {
       68:   34:    for (int i = 0; i < 16; i++){
       64:   35:        int pn = i;
       64:   36:        if(virt_mem[i].valid == true){
       12:   37:            pn = virt_mem[i].pp;
       12:   38:            printf("SHOWPTABLE");
        -:   39:        }
       64:   40:        printf("%d:%d:%d:%d\n", i, virt_mem[i].valid, virt_mem[i].dirty, pn);
        -:   41:    }
        4:   42:}
        -:   43:
       13:   44:void load_page(int disk_page, int main_page){
      117:   45:    for(int i = 0; i < 8; i++){
      104:   46:        main_mem[main_page][i] = disk_mem[disk_page][i];
        -:   47:    }
       13:   48:    printf("LOAD_PAGE");
       13:   49:}
        -:   50:
        2:   51:void evict_fifo(int page){
        2:   52:    int victim = fifo_list[0][0];
        2:   53:    int virt_page = fifo_list[0][1];
        -:   54:    // printf("EVICTING %d\n", virt_page);
        8:   55:    for(int i = 0; i < 3; i++){
        6:   56:        fifo_list[i][0] = fifo_list[i+1][0];
        6:   57:        fifo_list[i][1] = fifo_list[i+1][1];
        -:   58:    }
        2:   59:    fifo_list[3][0] = victim;
        2:   60:    fifo_list[3][1] = page;
        2:   61:    virt_mem[virt_page].valid = false;
        2:   62:    virt_mem[virt_page].dirty = false;
        2:   63:    load_page(page, victim);
        2:   64:    virt_mem[page].pp = victim;
        2:   65:    printf("EVICT_FIFO");
        2:   66:}
        -:   67:
        3:   68:void evict_lru(int page){
        3:   69:    int victim = 0;
       12:   70:    for(int i = 1; i < 4; i++){
        9:   71:        if(lru_list[victim][1] > lru_list[i][1]){
        3:   72:            victim = i;
        3:   73:            printf("EVICT_LRU");
        -:   74:        }
        -:   75:    }
        3:   76:    int virt_page = lru_list[victim][0];
        3:   77:    printf("EVICTING %d\n", virt_page);
        3:   78:    virt_mem[virt_page].valid = false;
        3:   79:    virt_mem[virt_page].dirty = false;
        3:   80:    load_page(page, victim);
        3:   81:    lru_list[victim][0] = page;
        -:   82:    // lru_list[victim][1] = lru_counter;
        3:   83:    virt_mem[page].pp = victim;
        3:   84:}
        -:   85:
        5:   86:void evict_page(int page){
        5:   87:    if(algo_fifo == true){
        2:   88:        printf("EVICT_PAGE FIFO");
        2:   89:        evict_fifo(page);
        -:   90:    }else{
        3:   91:        printf("EVICT_PAGE LRU");
        3:   92:        evict_lru(page);
        -:   93:    }
        5:   94:}
        -:   95:
       13:   96:void page_fault(int page){ // REVISIT
       13:   97:    printf("A Page Fault Has Occurred\n");
       13:   98:    if(open_spot < 4){
        8:   99:        load_page(page, open_spot);
        8:  100:        virt_mem[page].pp = open_spot;
        8:  101:        fifo_list[open_spot][0] = open_spot;
        8:  102:        fifo_list[open_spot][1] = page;
        -:  103:
        8:  104:        lru_list[open_spot][0] = page;
        8:  105:        lru_list[open_spot][1] = lru_counter;
        8:  106:        open_spot++;
        8:  107:        printf("PAGE_FAULT 1");
        -:  108:    } else{
        5:  109:        printf("PAGE_FAULT 2");
        5:  110:        evict_page(page);
        -:  111:    }
       13:  112:    virt_mem[page].valid = true;
       13:  113:}
        -:  114:
        6:  115:void read_addy(int addy){
        6:  116:    int page = addy / 8;
        6:  117:    int local_addr = addy % 8;
        -:  118:
        6:  119:    if(virt_mem[page].valid == false){
        4:  120:        page_fault(page);
        4:  121:        printf("READ_ADDY");
        -:  122:    }
        6:  123:    int main_page = virt_mem[page].pp;
        6:  124:    lru_counter++;
        6:  125:    lru_list[main_page][1] = lru_counter;
        6:  126:    printf("%d\n", main_mem[main_page][local_addr]);
        6:  127:}
        -:  128:
       12:  129:void write_addy(int addy, int val){
       12:  130:    int page = addy / 8;
       12:  131:    int local_addr = addy % 8;
       12:  132:    disk_mem[page][local_addr] = val;
       12:  133:    if(virt_mem[page].valid == false){
        9:  134:        page_fault(page);
        9:  135:        printf("WRITE_ADDY");
        -:  136:    }
       12:  137:    int main_page = virt_mem[page].pp;
       12:  138:    virt_mem[page].dirty = true;
       12:  139:    main_mem[main_page][local_addr] = val;
       12:  140:    lru_counter ++;
       12:  141:    lru_list[main_page][1] = lru_counter;
        -:  142:    //printf("WRITTEN: %d\n", main_mem[main_page][local_addr]);
       12:  143:}
        -:  144:
        2:  145:void init_memory(){
        2:  146:    printf("INIT_MEMORY");
       34:  147:    for (int i = 0; i < 16; i++) {
       32:  148:        virt_mem[i].valid = 0;
       32:  149:        virt_mem[i].dirty = 0;
       32:  150:        virt_mem[i].pp = -1;
        -:  151:
      288:  152:        for (int j = 0; j < 8; j++) {
      256:  153:            disk_mem[i][j] = -1;
      256:  154:            if(i < 4){
       64:  155:                main_mem[i][j] = -1;
        -:  156:            }
        -:  157:        }
        -:  158:    }
        2:  159:    printf("Initialized\n");
        2:  160:}
        -:  161:
        -:  162:
        2:  163:int main(int argc, char* arg[]){
        2:  164:    algo_fifo = true;
        2:  165:    printf("ARG %d %s", argc, *arg);
        2:  166:    if (argc >= 1 && strcmp(arg[1], "LRU") == 0) {
        1:  167:        algo_fifo = false;
        1:  168:        printf("MAIN 1");
        -:  169:    }
        -:  170:    // Init algorithm
        2:  171:    init_memory();
        -:  172:
        -:  173:    char inp[INP_SIZE];
       32:  174:    while (true) {
       34:  175:        printf("> ");
       34:  176:        fflush(stdout);
        -:  177:
        -:  178:        // Parse argv from input
       34:  179:        fgets(inp, INP_SIZE, stdin);
       34:  180:        inp[strlen(inp) - 1] = '\0';
        -:  181:        //printf("%s\n", inp);
       34:  182:        char *tmp = strtok(inp, " ");
       34:  183:        if (tmp == NULL) {
        1:  184:            printf("MAIN 2");
        4:  185:            continue;
        -:  186:        }
        -:  187:        char *argv[50];
       33:  188:        int num_args = 0;
      104:  189:        while (tmp != NULL) {
       71:  190:            printf("MAIN 3");
       71:  191:            argv[num_args] = strdup(tmp);
       71:  192:            num_args += 1;
       71:  193:            tmp = strtok(NULL, " ");
        -:  194:        }
        -:  195:
        -:  196:        // Commands
       33:  197:        if (strcmp(argv[0], "quit") == 0) {
        2:  198:            printf("MAIN 4");
        2:  199:            break;
       31:  200:        } else if (strcmp(argv[0], "showptable") == 0) {
        -:  201:            // argv[1] should be int
        4:  202:            printf("MAIN 5");
        4:  203:            showptable();
        -:  204:        } else {
       27:  205:            if (num_args < 2) {
        2:  206:                printf("Insufficient arguments.\n");
        2:  207:                printf("MAIN 6");
        2:  208:                continue;
        -:  209:            }
       25:  210:            int num = atoi(argv[1]);
       25:  211:            if (strcmp(argv[0], "read") == 0) {
        6:  212:                printf("MAIN 7");
        6:  213:                read_addy(num);
       19:  214:            } else if (strcmp(argv[0], "write") == 0) {
       13:  215:                if (num_args < 3) {
        1:  216:                    printf("MAIN 8");
        1:  217:                    printf("Insufficient arguments for write command.\n");
        1:  218:                    continue;
        -:  219:                }
       12:  220:                int value = atoi(argv[2]);
       12:  221:                write_addy(num, value);
        6:  222:            } else if (strcmp(argv[0], "showmain") == 0) {
        5:  223:                if(num < 4){
        4:  224:                    printf("MAIN 9");
        4:  225:                    showmain(num);
        -:  226:                } else{
        1:  227:                    printf("Invalid page number.\n");
        1:  228:                    printf("MAIN 10");
        -:  229:                }
        -:  230:            } else {
        1:  231:                printf("MAIN 11");
        1:  232:                printf("INVALID COMMAND\n");
        -:  233:            }
        -:  234:        }
        -:  235:    }
        2:  236:    return 0;
        -:  237:}
